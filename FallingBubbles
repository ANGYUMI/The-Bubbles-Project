//TAB_NO.1
Mover[] movers = new Mover[10];

void setup() {
  size(1285, 725, P3D);
  background(155, 175, 255);
  randomSeed(1);
  smooth();
  for (int i = 0; i < movers.length; i++) {
    movers[i] = new Mover(random(1, 4), random(width), 0);
  }
}

void draw() {
  background(155, 175, 255);

  
//    fill(155, 75, 255);
// ------ light ------ 
  ambientLight(120, 120, 120);
  directionalLight(255, 0, 255, mouseX, mouseY, width/2);//
  specular(255, 0, 255); // light color

  pointLight(0, 255, 255, mouseX, mouseY, width/2);//highlight color // syn: (r, g, b, x, y, z);
  lightSpecular(255, 0, 255);
  float s = map(mouseX, 0, width, 1, 10);
  
  shininess(s);
  
//  
  for (int i = 0; i < movers.length; i++) {

    PVector wind = new PVector(0, 0); //0.01, 0
    PVector gravity = new PVector(0, 0.05*movers[i].mass); // 0,  0.1*movers[i].mass

    float c = 0.05;
    PVector friction = movers[i].velocity.get();
    friction.mult(-1); 
    friction.normalize();
    friction.mult(c);

    movers[i].applyForce(friction);
    movers[i].applyForce(wind);
    movers[i].applyForce(gravity);

    movers[i].update();
    movers[i].display();
    movers[i].checkEdges();
  }
}

//TAB_NO.2
class Mover {

  PVector location;
  PVector velocity;
  PVector acceleration;
  float mass;

  Mover(float m, float x , float y) {
    mass = m;
    location = new PVector(x,y);
    velocity = new PVector(0,0);
    acceleration = new PVector(0,0);
  }
  
  void applyForce(PVector force) {
    PVector f = PVector.div(force,mass);
    acceleration.add(f);
  }
  
  void update() {
    velocity.add(acceleration);
    location.add(velocity);
    acceleration.mult(0);
  }

  void display() {
//    stroke(0);
//    strokeWeight(2);
//    fill(0,127);
//    ellipse(location.x,location.y,mass*16,mass*16);

//sphere
    pushMatrix();
    translate(location.x, location.y, 0); 
    noStroke();
    fill(225, 125, 255);
    strokeWeight(2);
    sphere(mass*8); //30//100
    popMatrix();
    
  }

  void checkEdges() {

    if (location.x > width) {
      location.x = width;
      velocity.x *= -1;
    } else if (location.x < 0) {
      location.x = 0;
      velocity.x *= -1;
    }

    if (location.y > height) {
      velocity.y *= -1;
      location.y = height;
    }

  }

}


